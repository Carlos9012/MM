#include <p18f4520.h>

#pragma config OSC=INTIO67	// clock interno (oscilador) e libera pinos RA6 e RA7 como IO

#define		c1		LATBbits.LATB0
#define		c2		LATBbits.LATB1
#define		c3		LATBbits.LATB2

#define		l1		PORTBbits.RB3
#define		l2		PORTBbits.RB4
#define		l3		PORTBbits.RB5
#define		l4		PORTBbits.RB6

#define	displays 	LATC	

#define		d1		LATDbits.LATD0
#define		d2		LATDbits.LATD1
#define		d3		LATDbits.LATD2
#define		d4		LATDbits.LATD3
#define		d5		LATDbits.LATD4
#define		d6		LATDbits.LATD5


char converte_7seg [] = 
{
//hgfedcba		//mapeamento de segmentos do display 7seg
0b00111111,		//"0"
0b00000110,		//"1"
0b01011011,		//"2"
0b01001111,		//"3"
0b01100110,		//"4"
0b01101101,		//"5"
0b01111101,		//"6"
0b00000111,		//"7"
0b01111111,		//"8"
0b01101111,		//"9"
0b00001000,		//underline
0b01000000,		//traco
};

char dh=0,uh=0,dm=0,um=0,ds=0,us=0,ms=0;
char p1=0,p2=0,p3=0,p4=0,p5=0,p6=0;
char cont = 0;
char aux = 0;

int vel=10;


void delay_ms (int);
void delay_s (int);
void delay_us (int); //não resolvido

void delay_s(int s)
{
	int i;
	for (;s>0;s--)
	{
		delay_ms(1001);		//delay de 1 seg]
		for (i=0;i<60;i++) {}	
	}
}

void delay_ms(int ms)

{
	unsigned int i;
	for (;ms>0;ms--)
	{
	for (i=0;i<131;i++) {}		//tempo de loop = 1ms
	}
}

void delay_us(int us)	//funciona a partir de 10us
{

}

void varre_display(void)
{
		d1=1;
		d2=1;
		d3=1;
		d4=1;
		d5=1;
		d6=1;	//desabilitei todos os displays
		
				
		displays = converte_7seg[dh];		//envia zero em 7 seg
		LATCbits.LATC7 = p1;				//controle do ponto decimal
		
		d1=0;			// liga d1
		delay_ms(vel);
		d1=1;			// desliga d1		
				
		displays = converte_7seg[uh];		//envia zero em 7 seg
		LATCbits.LATC7 = p2;
		
		d2=0;			// liga d2
		delay_ms(vel);
		d2=1;			// desliga d2
		
		displays = converte_7seg[dm];		//envia zero em 7 seg
		LATCbits.LATC7 = p3;
		
		d3=0;			// liga d2
		delay_ms(vel);
		d3=1;			// desliga d2
		
		displays = converte_7seg[um];		//envia zero em 7 seg
		LATCbits.LATC7 = p4;
		
		d4=0;			// liga d2
		delay_ms(vel);
		d4=1;			// desliga d2
		
		displays = converte_7seg[ds];		//envia zero em 7 seg
		LATCbits.LATC7 = p5;
		
		d5=0;			// liga d2
		delay_ms(vel);
		d5=1;			// desliga d2
		
		displays = converte_7seg[us];		//envia zero em 7 seg
		LATCbits.LATC7 = p6;
		
		d6=0;			// liga d2
		delay_ms(vel);
		d6=1;			// desliga d2
}

char varre_teclado (void)

{
	c1=0;		//seleciona a coluna do teclado
	c2=1;
	c3=1;
	
	if (l1==0)
	{
		while (l1==0) {};		//espera soltar a tecla 1
		return 1;
	}
	
	if (l2==0)
	{
		while (l2==0) {};		//espera soltar a tecla 1
		return 4;
	}

	if (l3==0)
	{
		while (l3==0) {};		//espera soltar a tecla 1
		return 7;
	}
	
	if (l4==0)
	{
		while (l4==0) {};		//espera soltar a tecla 1
		cont++;
		return ;
	}

	c1=1;
	c2=1;
	c3=1;
	
	return 255;		//teclado vazio
}



char varre_teclado_2 (void)

{
	c1=1;		//seleciona a coluna do teclado
	c2=0;
	c3=1;
	
	if (l1==0)
	{
		while (l1==0) {};		//espera soltar a tecla 1
		return 2;
	}
	
	if (l2==0)
	{
		while (l2==0) {};		//espera soltar a tecla 1
		return 5;
	}

	if (l3==0)
	{
		while (l3==0) {};		//espera soltar a tecla 1
		return 8;
	}
	if (l4==0)
	{
		while (l4==0) {};		//espera soltar a tecla 1
		return 0;
	}

	c1=1;
	c2=1;
	c3=1;
	
	return 255;		//teclado vazio
}



char varre_teclado_3 (void)

{
	c1=1;		//seleciona a coluna do teclado
	c2=1;
	c3=0;
	
	if (l1==0)
	{
		while (l1==0) {};		//espera soltar a tecla 1
		return 3;
	}
	
	if (l2==0)
	{
		while (l2==0) {};		//espera soltar a tecla 1
		return 5;
	}

	if (l3==0)
	{
		while (l3==0) {};		//espera soltar a tecla 1
		return 9;
	}
	

	c1=1;
	c2=1;
	c3=1;
	
	return 255;		//teclado vazio
}

char varre_teclado_modo (void){
	c1=1;		//seleciona a coluna do teclado
	c2=1;
	c3=0;
	
	
	if (l4==0){
		while (l4==0) {};		//espera soltar a tecla 1
		aux++;
		return;
	}

	c1=1;
	c2=1;
	c3=1;
	
	return 255;		//teclado vazio
}

void atualiza(void){
	ms++;
	if(ms>15){
		ms++;
		if(ms>9){
			ms=0;
			us++;
			if(us>9){
				us=0;
				ds++;
				if(ds>=6){
					ds=0;
					um++;
					if(um>9){
						um=0;
						dm++;
						if(dm>=6){
							dm=0;
							uh++;
							if(uh>9){
								uh=0;
								dh++;
							}
						}
					}
				}
			}
		}
	}
	if(dh>=1 && uh>=2){
		dh=0,uh=0,dm=0,um=0,ds=0,us=0;
	}
}

void teclado() {
	unsigned char tecla, tecla_2, tecla_3;
	tecla=varre_teclado();
	tecla_2=varre_teclado_2();
	tecla_3=varre_teclado_3();

	if (cont==0){
		if (tecla<10)
		{
			dh=tecla;
		}
		if (tecla_2<10)
		{
			dh=tecla_2;
		}
		if (tecla_3<10)
		{
			dh=tecla_3;
		}
	}
	if (cont==1){
		if (tecla<10)
		{
			uh=tecla;
		}
		if (tecla_2<10)
		{
			uh=tecla_2;
		}
		if (tecla_3<10)
		{
			uh=tecla_3;
		}
	}
	if (cont==2){
		if (tecla<10)
		{
			dm=tecla;
		}
		if (tecla_2<10)
		{
			dm=tecla_2;
		}
		if (tecla_3<10)
		{
			dm=tecla_3;
		}
	}
	if (cont==3){
		if (tecla<10)
		{
			um=tecla;
		}
		if (tecla_2<10)
		{
			um=tecla_2;
		}
		if (tecla_3<10)
		{
			um=tecla_3;
		}
	}
	if (cont==4){
		cont=0;
	}
}


void main ()

{	
	OSCCON=0b11111111;	//8MHz de clock da CPU
	ADCON1=0B00001111;	//DESABILITAS PINOS ANALÓGICOS
	TRISC=0B00000000;	//BARRAMENTO DOS DISPLAYS
	TRISD=0B11000000;	//CATODOS DOS DISPLAYS (HABILITADORES)
	TRISB=0B11111000;	//LINHAS E COLUNAS DO TECLADO

	while (1)
	{	
		varre_display();
		if (aux==0){
			varre_teclado_modo();
			teclado();
		}
		if (aux==1){
			varre_teclado_modo();
			atualiza();
			if (aux>=2){
				aux=0;
			}
		}
	}
}
